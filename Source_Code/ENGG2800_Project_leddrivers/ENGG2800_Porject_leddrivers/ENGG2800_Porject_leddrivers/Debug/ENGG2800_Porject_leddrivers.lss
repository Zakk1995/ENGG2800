
ENGG2800_Porject_leddrivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000185  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c4  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000014d  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016e  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a0  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  8e:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <TLC5940_Init>:
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,			// Channel 1
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,			// Channel 0
};

void TLC5940_Init(void) {
	setOutput(GSCLK_DDR, GSCLK_PIN);
  96:	20 9a       	sbi	0x04, 0	; 4
	setOutput(SCLK_DDR, SCLK_PIN);
  98:	25 9a       	sbi	0x04, 5	; 4
	setOutput(DCPRG_DDR, DCPRG_PIN);
  9a:	54 9a       	sbi	0x0a, 4	; 10
	setOutput(VPRG_DDR, VPRG_PIN);
  9c:	57 9a       	sbi	0x0a, 7	; 10
	setOutput(XLAT_DDR, XLAT_PIN);
  9e:	21 9a       	sbi	0x04, 1	; 4
	setOutput(BLANK_DDR, BLANK_PIN);
  a0:	22 9a       	sbi	0x04, 2	; 4
	setOutput(SIN_DDR, SIN_PIN);
  a2:	23 9a       	sbi	0x04, 3	; 4
	
	setLow(GSCLK_PORT, GSCLK_PIN);
  a4:	28 98       	cbi	0x05, 0	; 5
	setLow(SCLK_PORT, SCLK_PIN);
  a6:	2d 98       	cbi	0x05, 5	; 5
	setLow(DCPRG_PORT, DCPRG_PIN);
  a8:	5c 98       	cbi	0x0b, 4	; 11
	setHigh(VPRG_PORT, VPRG_PIN);
  aa:	5f 9a       	sbi	0x0b, 7	; 11
	setLow(XLAT_PORT, XLAT_PIN);
  ac:	29 98       	cbi	0x05, 1	; 5
	setHigh(BLANK_PORT, BLANK_PIN);
  ae:	2a 9a       	sbi	0x05, 2	; 5
  b0:	08 95       	ret

000000b2 <TLC5940_ClockInDC>:
}

void TLC5940_ClockInDC(void) {
	setHigh(DCPRG_PORT, DCPRG_PIN);
  b2:	5c 9a       	sbi	0x0b, 4	; 11
	setHigh(VPRG_PORT, VPRG_PIN);
  b4:	5f 9a       	sbi	0x0b, 7	; 11
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f1 e0       	ldi	r31, 0x01	; 1
	setHigh(VPRG_PORT, VPRG_PIN);
	setLow(XLAT_PORT, XLAT_PIN);
	setHigh(BLANK_PORT, BLANK_PIN);
}

void TLC5940_ClockInDC(void) {
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	03 c0       	rjmp	.+6      	; 0xc6 <TLC5940_ClockInDC+0x14>

	uint8_t Counter = 0;
	
	for (;;) {
		if (Counter > TLC5940_N * 96 - 1) {
			pulse(XLAT_PORT, XLAT_PIN);
  c0:	29 9a       	sbi	0x05, 1	; 5
  c2:	29 98       	cbi	0x05, 1	; 5
  c4:	08 95       	ret
			break;
			} else {
			if (dcData[Counter])
  c6:	21 91       	ld	r18, Z+
  c8:	22 23       	and	r18, r18
  ca:	11 f0       	breq	.+4      	; 0xd0 <TLC5940_ClockInDC+0x1e>
			setHigh(SIN_PORT, SIN_PIN);
  cc:	2b 9a       	sbi	0x05, 3	; 5
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <TLC5940_ClockInDC+0x20>
			else
			setLow(SIN_PORT, SIN_PIN);
  d0:	2b 98       	cbi	0x05, 3	; 5
			pulse(SCLK_PORT, SCLK_PIN);
  d2:	2d 9a       	sbi	0x05, 5	; 5
  d4:	2d 98       	cbi	0x05, 5	; 5
	setHigh(VPRG_PORT, VPRG_PIN);

	uint8_t Counter = 0;
	
	for (;;) {
		if (Counter > TLC5940_N * 96 - 1) {
  d6:	e8 17       	cp	r30, r24
  d8:	f9 07       	cpc	r31, r25
  da:	a9 f7       	brne	.-22     	; 0xc6 <TLC5940_ClockInDC+0x14>
  dc:	f1 cf       	rjmp	.-30     	; 0xc0 <TLC5940_ClockInDC+0xe>

000000de <TLC5940_SetGS_And_GS_PWM>:
}

void TLC5940_SetGS_And_GS_PWM(void) {
	uint8_t firstCycleFlag = 0;
	
	if (outputState(VPRG_PORT, VPRG_PIN)) {
  de:	5f 9b       	sbis	0x0b, 7	; 11
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <TLC5940_SetGS_And_GS_PWM+0xa>
		setLow(VPRG_PORT, VPRG_PIN);
  e2:	5f 98       	cbi	0x0b, 7	; 11
		firstCycleFlag = 1;
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <TLC5940_SetGS_And_GS_PWM+0xc>
		}
	}
}

void TLC5940_SetGS_And_GS_PWM(void) {
	uint8_t firstCycleFlag = 0;
  e8:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	uint16_t GSCLK_Counter = 0;
	uint8_t Data_Counter = 0;
	
	setLow(BLANK_PORT, BLANK_PIN);
  ea:	2a 98       	cbi	0x05, 2	; 5
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e1       	ldi	r25, 0x10	; 16
		setLow(VPRG_PORT, VPRG_PIN);
		firstCycleFlag = 1;
	}
	
	uint16_t GSCLK_Counter = 0;
	uint8_t Data_Counter = 0;
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	08 c0       	rjmp	.+16     	; 0x104 <TLC5940_SetGS_And_GS_PWM+0x26>
	
	setLow(BLANK_PORT, BLANK_PIN);
	for (;;) {
		if (GSCLK_Counter > 4095) {
			setHigh(BLANK_PORT, BLANK_PIN);
  f4:	2a 9a       	sbi	0x05, 2	; 5
			pulse(XLAT_PORT, XLAT_PIN);
  f6:	29 9a       	sbi	0x05, 1	; 5
  f8:	29 98       	cbi	0x05, 1	; 5
			if (firstCycleFlag) {
  fa:	44 23       	and	r20, r20
  fc:	b9 f0       	breq	.+46     	; 0x12c <TLC5940_SetGS_And_GS_PWM+0x4e>
				pulse(SCLK_PORT, SCLK_PIN);
  fe:	2d 9a       	sbi	0x05, 5	; 5
 100:	2d 98       	cbi	0x05, 5	; 5
 102:	08 95       	ret
				firstCycleFlag = 0;
			}
			break;
			} else {
			if (!(Data_Counter > TLC5940_N * 192 - 1)) {
 104:	20 3c       	cpi	r18, 0xC0	; 192
 106:	68 f4       	brcc	.+26     	; 0x122 <TLC5940_SetGS_And_GS_PWM+0x44>
				if (gsData[Data_Counter])
 108:	e2 2f       	mov	r30, r18
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e0 50       	subi	r30, 0x00	; 0
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	30 81       	ld	r19, Z
 112:	33 23       	and	r19, r19
 114:	11 f0       	breq	.+4      	; 0x11a <TLC5940_SetGS_And_GS_PWM+0x3c>
				setHigh(SIN_PORT, SIN_PIN);
 116:	2b 9a       	sbi	0x05, 3	; 5
 118:	01 c0       	rjmp	.+2      	; 0x11c <TLC5940_SetGS_And_GS_PWM+0x3e>
				else
				setLow(SIN_PORT, SIN_PIN);
 11a:	2b 98       	cbi	0x05, 3	; 5
				pulse(SCLK_PORT, SCLK_PIN);
 11c:	2d 9a       	sbi	0x05, 5	; 5
 11e:	2d 98       	cbi	0x05, 5	; 5
				Data_Counter++;
 120:	2f 5f       	subi	r18, 0xFF	; 255
			}
		}
		pulse(GSCLK_PORT, GSCLK_PIN);
 122:	28 9a       	sbi	0x05, 0	; 5
 124:	28 98       	cbi	0x05, 0	; 5
 126:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t GSCLK_Counter = 0;
	uint8_t Data_Counter = 0;
	
	setLow(BLANK_PORT, BLANK_PIN);
	for (;;) {
		if (GSCLK_Counter > 4095) {
 128:	69 f7       	brne	.-38     	; 0x104 <TLC5940_SetGS_And_GS_PWM+0x26>
 12a:	e4 cf       	rjmp	.-56     	; 0xf4 <TLC5940_SetGS_And_GS_PWM+0x16>
 12c:	08 95       	ret

0000012e <main>:
		GSCLK_Counter++;
	}
}

int main(void) {
	TLC5940_Init();
 12e:	0e 94 4b 00 	call	0x96	; 0x96 <TLC5940_Init>
	TLC5940_ClockInDC();	// try it both with and without this line
 132:	0e 94 59 00 	call	0xb2	; 0xb2 <TLC5940_ClockInDC>

	for (;;) {
		TLC5940_SetGS_And_GS_PWM();
 136:	0e 94 6f 00 	call	0xde	; 0xde <TLC5940_SetGS_And_GS_PWM>
 13a:	fd cf       	rjmp	.-6      	; 0x136 <main+0x8>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
